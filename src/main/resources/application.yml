server:
  port: 5000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
    
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000 # 2s
        response-timeout: 5s
        pool:
          type: elastic  # Type of connection pool (elastic, fixed, or disabled) elastic : to increase
                         # the number of concurrent connections dynamcally as the workfload increases
          max-idle-time: 15s # Idle time after which the communication channel will be closed
          max-life-time: 60s # Time after which the communication channel will be closed
      default-filters:
        - SaveSession  # Ensures the session data is saved before forwarding a request downstream
        - TokenRelay   # Enables the propagation of the Access Token (as an Authorization header) when calling a downstream service 
        - name: RequestRateLimiter # Rate limiting request managed by Redis
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3 # Maximum or retry attempts
            methods: GET # Retries only GET requests 
            series: SERVER_ERROR # Retries only when 5XX errors
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException # Retries only when the given exceptions are thrown
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9000}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker # blocking a failure from cascading and affecting other components, protecting the rest of the system
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: product-route
          uri: ${PRODUCT_SERVICE_URL:http://localhost:9001}/products
          predicates:
            - Path=/products/**
          filters:
            - name: CircuitBreaker
              args:
                name: productCircuitBreaker
                fallbackUri: forward:/product-fallback
        
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    timeout: 10m
    redis:
      namespace: polar:edge
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid,roles
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/PolarBookshop

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG